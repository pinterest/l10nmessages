"use strict";(self.webpackChunkl10nmessages_website=self.webpackChunkl10nmessages_website||[]).push([[659],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=p(n),m=r,k=u["".concat(s,".").concat(m)]||u[m]||c[m]||i;return n?a.createElement(k,o(o({ref:t},d),{},{components:n})):a.createElement(k,o({ref:t},d))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},5072:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const i={title:"Annotation Processor"},o=void 0,l={unversionedId:"annotation-processor",id:"annotation-processor",title:"Annotation Processor",description:"The annotation processor will process all the resource bundles that are registered with the",source:"@site/docs/annotation-processor.md",sourceDirName:".",slug:"/annotation-processor",permalink:"/docs/annotation-processor",draft:!1,editUrl:"https://github.com/pinterest/l10nmessages/edit/main/docs/docs/annotation-processor.md",tags:[],version:"current",frontMatter:{title:"Annotation Processor"},sidebar:"docs",previous:{title:"Resource Bundle",permalink:"/docs/resource-bundle"},next:{title:"Fluent API",permalink:"/docs/fluent-api"}},s={},p=[{value:"Register the resource bundle with <code>@L10nProperties</code>",id:"register-the-resource-bundle-with-l10nproperties",level:2},{value:"Enum generated by the annotation processor",id:"enum-generated-by-the-annotation-processor",level:2},{value:"Duplicated Keys",id:"duplicated-keys",level:2},{value:"MessageFormat validation",id:"messageformat-validation",level:2},{value:"ICU4J, JDK or JDK with named arguments",id:"icu4j-jdk-or-jdk-with-named-arguments",level:3},{value:"Validation targets",id:"validation-targets",level:3},{value:"Properties keys to Enum values",id:"properties-keys-to-enum-values",level:2}],d={toc:p};function c(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The annotation processor will process all the resource bundles that are registered with the\n",(0,r.kt)("inlineCode",{parentName:"p"},"@L10nProperties")," annotation."),(0,r.kt)("p",null,"For each resource bundle, the pre-processor:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Generates an ",(0,r.kt)("inlineCode",{parentName:"li"},"enum")," of the message keys contained in the source properties file. The enum can be\nused with ",(0,r.kt)("inlineCode",{parentName:"li"},"L10nMessages"),' for adding strong typing to "format" functions and to set the\n',(0,r.kt)("inlineCode",{parentName:"li"},"MessageFormatAdapterProvider"),"."),(0,r.kt)("li",{parentName:"ul"},"Checks for duplicates in keys. Can be configured with ",(0,r.kt)("inlineCode",{parentName:"li"},"onDuplicatedKeys")),(0,r.kt)("li",{parentName:"ul"},"Checks the validity for the message formats. Files to be checked can be configured with\n",(0,r.kt)("inlineCode",{parentName:"li"},"messageFormatValidationTargets"),". By default, both root and localized files are checked.")),(0,r.kt)("h2",{id:"register-the-resource-bundle-with-l10nproperties"},"Register the resource bundle with ",(0,r.kt)("inlineCode",{parentName:"h2"},"@L10nProperties")),(0,r.kt)("p",null,"Add the ",(0,r.kt)("inlineCode",{parentName:"p"},"@L10nProperties")," annotation to any class to register a resource bundle with the annotation\nprocessor. To understand how the ",(0,r.kt)("inlineCode",{parentName:"p"},"baseName")," is defined, check\n",(0,r.kt)("a",{parentName:"p",href:"/docs/resource-bundle#naming-convention"},"Naming convention"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'\n@L10nProperties(baseName = "com.pinterest.l10nmessages.example.Messages")\npublic class Application {\n\n}\n\n')),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"For Maven builds, the annotation processor can be replaced with a\n",(0,r.kt)("a",{parentName:"p",href:"/docs/installation/maven#maven-plugin"},"Maven plugin"),". The resource bundle registration will be done in\nthe ",(0,r.kt)("inlineCode",{parentName:"p"},"pom.xml")," file instead of using the annotation.")),(0,r.kt)("h2",{id:"enum-generated-by-the-annotation-processor"},"Enum generated by the annotation processor"),(0,r.kt)("p",null,"During compilation, the annotation processor will generate an ",(0,r.kt)("inlineCode",{parentName:"p"},"enum")," per bundle. The ",(0,r.kt)("inlineCode",{parentName:"p"},"enum")," fully\nqualified name corresponds to the resource bundle ",(0,r.kt)("inlineCode",{parentName:"p"},"baseName"),". Make sure there are no conflicts with\nexisting classes."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"enum")," will look like:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'package com.pinterest.l10nmessages.example;\n\npublic enum Messages {\n  welcome_user("welcome_user");\n\n  public static final String BASENAME = "com.pinterest.l10nmessages.example.Messages";\n  // ...\n}\n')),(0,r.kt)("h2",{id:"duplicated-keys"},"Duplicated Keys"),(0,r.kt)("p",null,"When writing ",(0,r.kt)("inlineCode",{parentName:"p"},"properties")," file, nothing prevents to write two different messages with the same key.\nThe JDK will load the resource bundle without errors but that can lead to unexpected behavior in the\napplication."),(0,r.kt)("p",null,"To address this, the annotation processor checks for duplicated keys and will reject them by\ndefault. This can be configured with ",(0,r.kt)("inlineCode",{parentName:"p"},"onDuplicatedKeys")," to accept only when messages are the same,\nor to always accept (back to JDK behavior)."),(0,r.kt)("h2",{id:"messageformat-validation"},"MessageFormat validation"),(0,r.kt)("p",null,"A message is valid if it is possible to create a ",(0,r.kt)("inlineCode",{parentName:"p"},"MessageFormat")," instance from it. The type of\n",(0,r.kt)("inlineCode",{parentName:"p"},"MessageFormat")," can be changed with ",(0,r.kt)("inlineCode",{parentName:"p"},"messageFormatAdapterProviders")," annotation attribute."),(0,r.kt)("h3",{id:"icu4j-jdk-or-jdk-with-named-arguments"},"ICU4J, JDK or JDK with named arguments"),(0,r.kt)("p",null,"By default, the annotation processor\n(",(0,r.kt)("a",{parentName:"p",href:"/docs/fluent-api#icu4j-jdk-or-jdk-with-named-arguments"},"as the fluent API"),") will use ",(0,r.kt)("inlineCode",{parentName:"p"},"ICU4J")," if it is\navailable. If not, it will use the ",(0,r.kt)("inlineCode",{parentName:"p"},"JDK")," extended with\n",(0,r.kt)("a",{parentName:"p",href:"/docs/fluent-api#named-arguments-with-jdk-messageformat"},"named arguments")," support."),(0,r.kt)("p",null,"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"messageFormatAdapterProviders")," to set a specific version of ",(0,r.kt)("inlineCode",{parentName:"p"},"MessageFormat")," to use."),(0,r.kt)("p",null,"For example, to force strict ",(0,r.kt)("inlineCode",{parentName:"p"},"JDK")," validation:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'\n@L10nProperties(\n        baseName = "com.pinterest.l10nmessages.example.Messages",\n        messageFormatAdapterProviders = MessageFormatAdapterProviders.JDK\n)\npublic class Application {\n\n}\n')),(0,r.kt)("h3",{id:"validation-targets"},"Validation targets"),(0,r.kt)("p",null,"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"messageFormatValidationTargets")," to choose which properties files will be checked. By default,\nboth ",(0,r.kt)("inlineCode",{parentName:"p"},"root")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"localized")," files are validated. To fully disable the checks use\n",(0,r.kt)("inlineCode",{parentName:"p"},"messageFormatValidationTargets={}"),"."),(0,r.kt)("p",null,"For example, to check only the root file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'\n@L10nProperties(\n        baseName = "com.pinterest.l10nmessages.example.Messages",\n        messageFormatValidationTargets = {ROOT})\npublic class Application {\n\n}\n')),(0,r.kt)("h2",{id:"properties-keys-to-enum-values"},"Properties keys to Enum values"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Properties")," keys must be turned into valid Java identifiers when generating the ",(0,r.kt)("inlineCode",{parentName:"p"},"enum")," for strong\ntyping."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"ToJavaIdentifiers.ESCAPING_AND_UNDERSCORE")," is the default conversion type. It aims at creating\nshorter and more natural Java identifiers."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},".")," is converted to ",(0,r.kt)("inlineCode",{parentName:"p"},"_"),". If the first key character is invalid as identifier first character but\nwould be valid as a second character then ",(0,r.kt)("inlineCode",{parentName:"p"},"_")," is prepended. Finally, all other invalid characters\nare replaced with the following escape sequence ",(0,r.kt)("inlineCode",{parentName:"p"},"_u{codepoint}_"),"."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Properties Key"),(0,r.kt)("th",{parentName:"tr",align:null},"Java identifier"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"dot.to.underscore"),(0,r.kt)("td",{parentName:"tr",align:null},"dot_to_underscore")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"1_invalid_first"),(0,r.kt)("td",{parentName:"tr",align:null},"_","1_invalid_first")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"with space"),(0,r.kt)("td",{parentName:"tr",align:null},"with_u32_space")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"collision.issue"),(0,r.kt)("td",{parentName:"tr",align:null},"collision_issue")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"collision_issue"),(0,r.kt)("td",{parentName:"tr",align:null},"collision_issue")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"class"),(0,r.kt)("td",{parentName:"tr",align:null},"_","class")))),(0,r.kt)("p",null,"That conversion can lead to collisions which will make the ",(0,r.kt)("inlineCode",{parentName:"p"},"enum")," compilation fail. In that case,\nmodify the keys accordingly. If that's not possible, use ",(0,r.kt)("inlineCode",{parentName:"p"},"ToJavaIdentifiers.ESCAPING_ONLY")," instead.\nAll invalid characters will be replaced with the escape sequence. The drawback will be less natural\nidentifiers."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Properties Key"),(0,r.kt)("th",{parentName:"tr",align:null},"Java identifier"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"collision.issue"),(0,r.kt)("td",{parentName:"tr",align:null},"collision_u46_issue")))))}c.isMDXComponent=!0}}]);