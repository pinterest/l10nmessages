"use strict";(self.webpackChunkl10nmessages_website=self.webpackChunkl10nmessages_website||[]).push([[669],{3905:(e,n,a)=>{a.d(n,{Zo:()=>u,kt:()=>d});var t=a(7294);function s(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function r(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function i(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?r(Object(a),!0).forEach((function(n){s(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function o(e,n){if(null==e)return{};var a,t,s=function(e,n){if(null==e)return{};var a,t,s={},r=Object.keys(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||(s[a]=e[a]);return s}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(s[a]=e[a])}return s}var l=t.createContext({}),m=function(e){var n=t.useContext(l),a=n;return e&&(a="function"==typeof e?e(n):i(i({},n),e)),a},u=function(e){var n=m(e.components);return t.createElement(l.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},g=t.forwardRef((function(e,n){var a=e.components,s=e.mdxType,r=e.originalType,l=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),g=m(a),d=s,c=g["".concat(l,".").concat(d)]||g[d]||p[d]||r;return a?t.createElement(c,i(i({ref:n},u),{},{components:a})):t.createElement(c,i({ref:n},u))}));function d(e,n){var a=arguments,s=n&&n.mdxType;if("string"==typeof e||s){var r=a.length,i=new Array(r);i[0]=g;var o={};for(var l in n)hasOwnProperty.call(n,l)&&(o[l]=n[l]);o.originalType=e,o.mdxType="string"==typeof e?e:s,i[1]=o;for(var m=2;m<r;m++)i[m]=a[m];return t.createElement.apply(null,i)}return t.createElement.apply(null,a)}g.displayName="MDXCreateElement"},301:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>r,metadata:()=>o,toc:()=>m});var t=a(7462),s=(a(7294),a(3905));const r={},i="ICU4J",o={unversionedId:"icu4j",id:"icu4j",title:"ICU4J",description:"ICU4J provides improvements over JDK internationalization capabilities and is highly recommended",source:"@site/docs/icu4j.md",sourceDirName:".",slug:"/icu4j",permalink:"/docs/icu4j",draft:!1,editUrl:"https://github.com/pinterest/l10nmessages/edit/main/docs/docs/icu4j.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Caching",permalink:"/docs/caching"},next:{title:"Examples",permalink:"/docs/examples"}},l={},m=[{value:"Basic formatting",id:"basic-formatting",level:2},{value:"Numbers",id:"numbers",level:2},{value:"Dates and Times",id:"dates-and-times",level:2},{value:"Skeletons",id:"skeletons",level:2},{value:"Pluralization - Message with quantity",id:"pluralization---message-with-quantity",level:2},{value:"Mapping to CLDR forms",id:"mapping-to-cldr-forms",level:3},{value:"Customized message for a specific quantity",id:"customized-message-for-a-specific-quantity",level:3},{value:"Complex messages - Genderization, list formatting and more",id:"complex-messages---genderization-list-formatting-and-more",level:2}],u={toc:m};function p(e){let{components:n,...a}=e;return(0,s.kt)("wrapper",(0,t.Z)({},u,a,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"icu4j"},"ICU4J"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"ICU4J")," provides improvements over ",(0,s.kt)("inlineCode",{parentName:"p"},"JDK")," internationalization capabilities and is highly recommended\nfor localizing a Java application."),(0,s.kt)("p",null,'The "ICU" message format pattern have been adopted by many other libraries in a variety of\nlanguages.'),(0,s.kt)("p",null,"This guide covers the most common usages and showcases some differences between languages when it\ncomes to formatting numbers and dates as well as handling plurals and gender in messages."),(0,s.kt)("p",null,"Check the ",(0,s.kt)("a",{parentName:"p",href:"/docs/installation/"},"installation guides")," to add the dependency and the\n",(0,s.kt)("a",{parentName:"p",href:"https://unicode-org.github.io/icu/userguide/format_parse/messages/"},"ICU documentation")," for more\ninformation."),(0,s.kt)("h2",{id:"basic-formatting"},"Basic formatting"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"ICU4J")," support both named and numbered arguments (see\n",(0,s.kt)("a",{parentName:"p",href:"/docs/fluent-api#named-vs-numbered-arguments"},"differences with JDK"),")."),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"L10nMessages"),' always references placeholders by their name as a "string". A numbered argument ',(0,s.kt)("inlineCode",{parentName:"p"},"{0}"),"\nis referenced by the key ",(0,s.kt)("inlineCode",{parentName:"p"},'"0"'),"."),(0,s.kt)("admonition",{type:"note"},(0,s.kt)("p",{parentName:"admonition"},"It is recommended to always use named arguments since it is self documenting and gives more context\nto translators, leading to better translations.")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-properties",metastring:"title=en.properties",title:"en.properties"},"welcome_user=Welcome {username}!\nwelcome_user_numbered=Welcome {0}!\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-properties",metastring:"title=fr.properties",title:"fr.properties"},"welcome_user_numbered=Bienvenue {username}!\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'class Example {\n\n  {\n    L10nMessages<Messages> m = L10nMessages.builder(Messages.class).build();\n    System.out.println(m.format(welcome_user, "username", "Mary"));\n    // Welcome Mary!\n\n    System.out.println(m.format(welcome_user_numbered, "0", "Mary"));\n    // Welcome Mary!\n  }\n\n  {\n    L10nMessages<Messages> m = L10nMessages.builder(Messages.class).locale(Locale.FRANCE).build();\n    System.out.println(m.format(welcome_user, "username", "Mary"));\n    // Bienvenue Mary!\n  }\n}\n')),(0,s.kt)("h2",{id:"numbers"},"Numbers"),(0,s.kt)("p",null,"For number formatting, use the ",(0,s.kt)("inlineCode",{parentName:"p"},"number")," argument. Optionally, add a pre-defined ",(0,s.kt)("inlineCode",{parentName:"p"},"argStyle")," such as\n",(0,s.kt)("inlineCode",{parentName:"p"},"integer"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"percent"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"currency")," to customize output."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-properties",metastring:"title=en.properties",title:"en.properties"},"numbers=Examples: {basic, number}, {basic, number, integer}, {percentage, number, percent}, \\\n  {currency, number, currency}\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-properties",metastring:"title=fr.properties",title:"fr.properties"},"numbers=Exemples: {basic, number}, {basic, number, integer}, {percentage, number, percent}, \\\n  {currency, number, currency}\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'class Example {\n\n  {\n    L10nMessages<Messages> m = L10nMessages.builder(Messages.class).build();\n    System.out.println(m.format(numbers, "basic", 1000, "percentage", 0.5, "currency", 50));\n    // Examples: 1,000.1, 1,000, 50%, $50.00\n  }\n\n  {\n    L10nMessages<Messages> m = L10nMessages.builder(Messages.class).locale(Locale.FRANCE).build();\n    System.out.println(m.format(numbers, "basic", 1000, "percentage", 0.5, "currency", 50));\n    // Exemples: 1\u202f000,1, 1\u202f000, 50\xa0%, 50,00\xa0\u20ac\n  }\n}\n')),(0,s.kt)("h2",{id:"dates-and-times"},"Dates and Times"),(0,s.kt)("p",null,"For date formatting, use the ",(0,s.kt)("inlineCode",{parentName:"p"},"date")," argument and for time formatting the ",(0,s.kt)("inlineCode",{parentName:"p"},"time")," argument.\nOptionally, add pre-defined ",(0,s.kt)("inlineCode",{parentName:"p"},"argStyle")," such as ",(0,s.kt)("inlineCode",{parentName:"p"},"short"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"medium"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"long"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"full")," to customize\noutput."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-properties",metastring:"title=en.properties",title:"en.properties"},"today_is=Today is: {todayDate, date}, it is: {todayDate, time}\ntoday_is_short=Today is: {todayDate, date, short}, it is: {todayDate, time, short}\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-properties",metastring:"title=fr.properties",title:"fr.properties"},"today_is=Aujourd'hui c'est le: {todayDate, date}, il est: {todayDate, time}\ntoday_is_short=Aujourd'hui c'est le: {todayDate, date, short}, il est: {todayDate, time, short}\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'class Example {\n\n  {\n    L10nMessages<Messages> m = L10nMessages.builder(Messages.class).build();\n    System.out.println(m.format(today_is, "todayDate", new Date()));\n    // Today is: Jun 22, 2022, it is: 8:36:08 PM\n\n    System.out.println(m.format(today_is_short, "todayDate", new Date()));\n    // Today is: 6/22/22, it is: 8:36 PM\n  }\n\n  {\n    L10nMessages<Messages> m = L10nMessages.builder(Messages.class).locale(Locale.FRANCE).build();\n    System.out.println(m.format(today_is, "todayDate", new Date()));\n    // Aujourd\'hui c\'est le: 22 juin 2022, il est: 20:36:08\n\n    System.out.println(m.format(today_is_short, "todayDate", new Date()));\n    // Aujourd\'hui c\'est le: 22/06/2022, il est: 20:36\n  }\n}\n')),(0,s.kt)("h2",{id:"skeletons"},"Skeletons"),(0,s.kt)("p",null,"Further customization for number, date and time formatting can be done using skeletons. Here is just\na basic example to show the syntax. For more information, see\n",(0,s.kt)("a",{parentName:"p",href:"https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html"},"number skeletons"),"\nand ",(0,s.kt)("a",{parentName:"p",href:"https://unicode-org.github.io/icu/userguide/format_parse/datetime/"},"date skeletons"),"."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-properties",metastring:"title=en.properties",title:"en.properties"},"skeletons={number, number, :: .00 currency/CAD} - {date, date, :: MMMMdjmm}\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'class Example {\n\n  {\n    L10nMessages<Messages> m = L10nMessages.builder(Messages.class).build();\n    System.out.println(m.format(skeletons, "number", 1000.1234, "date", new Date()));\n    // CA$1,000.12 - June 22, 9:29:42 PM\n  }\n\n  {\n    L10nMessages<Messages> m = L10nMessages.builder(Messages.class).locale(Locale.FRANCE).build();\n    System.out.println(m.format(skeletons, "number", 1000.1234, "date", new Date()));\n    // 1\u202f000,12\xa0$CA - 22 juin, 21:29:42\n  }\n}\n')),(0,s.kt)("h2",{id:"pluralization---message-with-quantity"},"Pluralization - Message with quantity"),(0,s.kt)("p",null,"Consider the following sentence: ",(0,s.kt)("inlineCode",{parentName:"p"},"You have 5 messages")," where the quantity: ",(0,s.kt)("inlineCode",{parentName:"p"},"5")," varies at runtime:\n",(0,s.kt)("inlineCode",{parentName:"p"},"0, 1, 5, 100, etc"),"."),(0,s.kt)("p",null,"The ending of the noun ",(0,s.kt)("inlineCode",{parentName:"p"},"message")," will change based on the quantity:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"You have 0 messages")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"You have 1 message")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"You have 5 messages")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"You have 100 messages"))),(0,s.kt)("p",null,"From this, we can identify the 2 forms (singular and plural) needed to render all variations:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"You have {numberMessage} message")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"You have {numberMessage} messages"))),(0,s.kt)("p",null,"Sometimes, it is also preferable to customize the output for a specific quantity, typically ",(0,s.kt)("inlineCode",{parentName:"p"},"0"),". For\nexample, ",(0,s.kt)("inlineCode",{parentName:"p"},"You have no messages")," reads better than ",(0,s.kt)("inlineCode",{parentName:"p"},"You have 0 messages"),"."),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"plural")," argument is a special construct provided by ",(0,s.kt)("inlineCode",{parentName:"p"},"ICU")," to list the different plural forms of\na message in a single string and to customize them based on the language. It also has a mechanism to\nspecify a message for a given quantity."),(0,s.kt)("p",null,"Many languages will need adaptation to the number of plural forms. Some require a single form only,\nwhile others may need up to six forms to cover all the linguistic requirements. The mapping from\nquantity to plural form is performed by the library at runtime based on the\n",(0,s.kt)("a",{parentName:"p",href:"https://unicode-org.github.io/cldr-staging/charts/latest/supplemental/language_plural_rules.html"},"CLDR plural rules"),"\n."),(0,s.kt)("p",null,"French uses 2 forms like English but the singular is used for ",(0,s.kt)("inlineCode",{parentName:"p"},"0")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"Vous avez 0 message")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"Vous avez 1 message")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"Vous avez 5 messages"))),(0,s.kt)("p",null,"Japanese uses a single form:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"\u30e1\u30c3\u30bb\u30fc\u30b8\u304c 0 \u4ef6")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"\u30e1\u30c3\u30bb\u30fc\u30b8\u304c 1 \u4ef6")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"\u30e1\u30c3\u30bb\u30fc\u30b8\u304c 5 \u4ef6"))),(0,s.kt)("p",null,"Russian needs 4 forms and is cyclic:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"\u0423 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c 0 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"\u0423 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c 1 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"\u0423 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c 2 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"\u0423 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c 5 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"\u0423 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c 21 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"\u0423 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c 22 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"\u0423 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c 25 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439"))),(0,s.kt)("admonition",{type:"info"},(0,s.kt)("p",{parentName:"admonition"},"A common pitfall is to skip pluralization when the quantity is know to be greater than one. While\nthis work in English, it will prevent proper localization in some other languages like Russian."),(0,s.kt)("p",{parentName:"admonition"},"Always use a ",(0,s.kt)("inlineCode",{parentName:"p"},"plural")," argument when working with a variable quantity.")),(0,s.kt)("h3",{id:"mapping-to-cldr-forms"},"Mapping to CLDR forms"),(0,s.kt)("p",null,"When writing the source string in English, the singular string ",(0,s.kt)("inlineCode",{parentName:"p"},"You have {numberMessage} message"),"\nmaps to CLDR's ",(0,s.kt)("inlineCode",{parentName:"p"},"one")," form and the plural string ",(0,s.kt)("inlineCode",{parentName:"p"},"You have {numberMessage} messages")," maps to CLDR's\n",(0,s.kt)("inlineCode",{parentName:"p"},"other")," form."),(0,s.kt)("p",null,"Some languages like Japanese will use a single form (",(0,s.kt)("inlineCode",{parentName:"p"},"other"),") in the localized message, whereas\nRussian will use 4 forms (",(0,s.kt)("inlineCode",{parentName:"p"},"one"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"few"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"many")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"other"),") and Arabic will use six forms (",(0,s.kt)("inlineCode",{parentName:"p"},"zero"),",\n",(0,s.kt)("inlineCode",{parentName:"p"},"one"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"two"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"few"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"many")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"other"),")."),(0,s.kt)("p",null,"See ",(0,s.kt)("a",{parentName:"p",href:"https://cldr.unicode.org/index/cldr-spec/plural-rules"},"CLDR Plural Rules")," for more details."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-properties",metastring:"title=en.properties",title:"en.properties"},"you_have_messages={numberMessages, plural, \\\n  one   {You have {numberMessages} message} \\\n  other {You have {numberMessages} messages}}\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-properties",metastring:"title=fr.properties",title:"fr.properties"},"you_have_messages={numberMessages, plural, \\\n  one   {Vous avez {numberMessages} message} \\\n  other {Vous avez {numberMessages} messages}}\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-properties",metastring:"title=ja.properties",title:"ja.properties"},"you_have_messages={numberMessages, plural, \\\n  other {\u30e1\u30c3\u30bb\u30fc\u30b8\u304c {numberMessages} \u4ef6}}\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-properties",metastring:"title=ru.properties",title:"ru.properties"},"you_have_messages={numberMessages, plural, \\\n  one   {\u0423 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c {numberMessages} \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435} \\\n  few   {\u0423 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c {numberMessages} \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f} \\\n  many  {\u0423 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c {numberMessages} \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439} \\\n  other {\u0423 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c {numberMessages} \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f}}\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'class Example {\n\n  {\n    L10nMessages<Messages> m = L10nMessages.builder(Messages.class).build();\n    IntStream.range(0, 3)\n        .forEach(\n            numberMessages ->\n                System.out.println(m.format(you_have_messages, "numberMessages", numberMessages)));\n\n    // You have 0 messages\n    // You have 1 message\n    // You have 2 messages\n  }\n\n  {\n    L10nMessages<Messages> m = L10nMessages.builder(Messages.class).locale(Locale.FRANCE).build();\n    IntStream.range(0, 3)\n        .forEach(\n            numberMessages ->\n                System.out.println(m.format(you_have_messages, "numberMessages",\n                    numberMessages)));\n\n    // Vous avez 0 message\n    // Vous avez 1 message\n    // Vous avez 2 messages\n  }\n\n  {\n    L10nMessages<Messages> m = L10nMessages.builder(Messages.class).locale(Locale.JAPANESE).build();\n    IntStream.range(0, 3)\n        .forEach(\n            numberMessages ->\n                System.out.println(m.format(you_have_messages, "numberMessages",\n                    numberMessages)));\n\n    // \u30e1\u30c3\u30bb\u30fc\u30b8\u304c 0 \u4ef6\n    // \u30e1\u30c3\u30bb\u30fc\u30b8\u304c 1 \u4ef6\n    // \u30e1\u30c3\u30bb\u30fc\u30b8\u304c 2 \u4ef6\n  }\n\n  {\n    L10nMessages<Messages> m = L10nMessages.builder(Messages.class)\n        .locale(Locale.forLanguageTag("ru")).build();\n    IntStream.of(0, 1, 2, 5, 21, 22, 25)\n        .forEach(\n            numberMessages ->\n                System.out.println(m.format(you_have_messages, "numberMessages",\n                    numberMessages)));\n\n    // \u0423 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c 0 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439\n    // \u0423 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c 1 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435\n    // \u0423 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c 2 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f\n    // \u0423 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c 5 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439\n    // \u0423 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c 21 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435\n    // \u0423 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c 22 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f\n    // \u0423 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c 25 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439\n  }\n}\n')),(0,s.kt)("admonition",{type:"info"},(0,s.kt)("p",{parentName:"admonition"},"The ",(0,s.kt)("inlineCode",{parentName:"p"},"other")," form must always be provided. By default, ",(0,s.kt)("inlineCode",{parentName:"p"},"L10nMessages")," ensures it is the case as part\nof the message format validation.")),(0,s.kt)("h3",{id:"customized-message-for-a-specific-quantity"},"Customized message for a specific quantity"),(0,s.kt)("p",null,"It is possible to provide a customized message for a specific quantity. For example, use ",(0,s.kt)("inlineCode",{parentName:"p"},"=0")," to\nprovide the specific message: ",(0,s.kt)("inlineCode",{parentName:"p"},"You have no messages")," when the number of messages is ",(0,s.kt)("inlineCode",{parentName:"p"},"0"),"."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-properties",metastring:"title=en.properties",title:"en.properties"},"you_have_messages={numberMessage, plural, \\\n  =0    {You have no messages} \\\n  one   {You have {numberMessage} message} \\\n  other {You have {numberMessage} messages}}\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-properties",metastring:"title=fr.properties",title:"fr.properties"},"you_have_messages={numberMessage, plural, \\\n  =0    {Vous n'avez aucun message} \\\n  one   {Vous avez {numberMessage} message} \\\n  other {Vous avez {numberMessage} messages}}\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'class Example {\n\n  {\n    L10nMessages<Messages> m = L10nMessages.builder(Messages.class).build();\n    IntStream.range(0, 3)\n        .forEach(\n            numberMessage ->\n                System.out.println(m.format(you_have_messages, "numberMessage", numberMessage)));\n\n    // You have no messages\n    // You have 1 message\n    // You have 2 messages\n  }\n\n  {\n    L10nMessages<Messages> m = L10nMessages.builder(Messages.class).locale(Locale.FRANCE).build();\n    IntStream.range(0, 3)\n        .forEach(\n            numberMessage ->\n                System.out.println(m.format(you_have_messages, "numberMessage",\n                    numberMessage)));\n\n    // Vous n\'avez aucun message\n    // Vous avez 1 message\n    // Vous avez 2 messages\n  }\n}\n')),(0,s.kt)("h2",{id:"complex-messages---genderization-list-formatting-and-more"},"Complex messages - Genderization, list formatting and more"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"ICU")," provides many other features that are useful to localize messages. Combining them allows\nbuilding more complex messages, but the complexity might quickly explode. It may also introduce edge\ncases that are not properly translatable in all languages so it is important to keep messages as\nsimple as possible."),(0,s.kt)("p",null,"This example shows how to genderize a sentence using the ",(0,s.kt)("inlineCode",{parentName:"p"},"select")," argument and how to use the\n",(0,s.kt)("a",{parentName:"p",href:"https://unicode-org.github.io/icu-docs/apidoc/dev/icu4j/com/ibm/icu/text/ListFormatter.Type.html"},"ListFormatter"),"\nformatter that is not directly accessible in the message format. It is combined with the ",(0,s.kt)("inlineCode",{parentName:"p"},"plural"),"\nargument to handle the empty list and the list with a single element."),(0,s.kt)("admonition",{type:"info"},(0,s.kt)("p",{parentName:"admonition"},"It is recommended to write full sentences, hence to move the arguments to the outer part of the\nmessages. The ",(0,s.kt)("inlineCode",{parentName:"p"},"plural")," arguments should be nested inside the ",(0,s.kt)("inlineCode",{parentName:"p"},"select")," argument that is used for the\ngender.")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-properties",metastring:"title=en.properties",title:"en.properties"},"favorite_numbers={userGender, select, \\\n  female {{numbersCount, plural, \\\n     =0    {She has no favorite numbers} \\\n     one   {Her favorite number is {numbers}} \\\n     other {Her favorite numbers are {numbers}}}} \\\n  male   {{numbersCount, plural, \\\n     =0    {He has no favorite numbers} \\\n     one   {His favorite number is {numbers}} \\\n     other {His favorite numbers are {numbers}}}} \\\n  other  {{numbersCount, plural, \\\n     =0    {They have no favorite numbers} \\\n     one   {Their favorite number is {numbers}} \\\n     other {Their favorite numbers are {numbers}}}} \\\n  }\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-properties",metastring:"title=fr.properties",title:"fr.properties"},"favorite_numbers={userGender, select, \\\n  female {{numbersCount, plural, \\\n     =0    {Elle n'a pas de nombre pr\xe9fer\xe9} \\\n     one   {Son nombre pr\xe9fer\xe9 est {numbers}} \\\n     other {Ses nombres pr\xe9fer\xe9s sont {numbers}}}} \\\n  male   {{numbersCount, plural, \\\n     =0    {Il n'a pas de nombre pr\xe9fer\xe9} \\\n     one   {Son nombre pr\xe9fer\xe9 est {numbers}} \\\n     other {Ses nombres pr\xe9fer\xe9s sont {numbers}}}} \\\n  other  {{numbersCount, plural, \\\n     =0    {Il/Elle n'a pas de nombre pr\xe9fer\xe9} \\\n     one   {Son nombre pr\xe9fer\xe9 est {numbers}} \\\n     other {Ses nombres pr\xe9fer\xe9s sont {numbers}}}} \\\n  }\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'class Example {\n\n  {\n    L10nMessages<Messages> m = L10nMessages.builder(Messages.class).build();\n    ListFormatter lf = ListFormatter.getInstance();\n    Stream.of("female", "male", "other").forEach(userGender ->\n        Stream.of(Arrays.asList(), Arrays.asList("1"), Arrays.asList("3", "7"))\n            .forEach(numbers -> System.out.println(\n                m.format(favorite_numbers, "numbers", lf.format(numbers),\n                    "numbersCount", numbers.size(), "userGender", userGender))));\n\n    // She has no favorite numbers\n    // Her favorite number is 1\n    // Her favorite numbers are 3 and 7\n\n    // He has no favorite numbers\n    // His favorite number is 1\n    // His favorite numbers are 3 and 7\n\n    // They have no favorite numbers\n    // Their favorite number is 1\n    // Their favorite numbers are 3 and 7\n  }\n\n  {\n    L10nMessages<Messages> m = L10nMessages.builder(Messages.class).locale(Locale.FRANCE).build();\n    ListFormatter lf = ListFormatter.getInstance(Locale.FRANCE);\n    Stream.of("female", "male", "other").forEach(gender ->\n        Stream.of(Arrays.asList(), Arrays.asList("1"), Arrays.asList("3", "7"))\n            .forEach(numbers -> System.out.println(\n                m.format(favorite_numbers, "numbers", lf.format(numbers),\n                    "numbersCount", numbers.size(), "userGender", gender))));\n\n    // Elle n\'a pas de nombre pr\xe9fer\xe9\n    // Son nombre pr\xe9fer\xe9 est 1\n    // Ses nombres pr\xe9fer\xe9s sont 3 et 7\n\n    // Il n\'a pas de nombre pr\xe9fer\xe9\n    // Son nombre pr\xe9fer\xe9 est 1\n    // Ses nombres pr\xe9fer\xe9s sont 3 et 7\n\n    // Il/Elle n\'a pas de nombre pr\xe9fer\xe9\n    // Son nombre pr\xe9fer\xe9 est 1\n    // Ses nombres pr\xe9fer\xe9s sont 3 et 7\n  }\n}\n\n')))}p.isMDXComponent=!0}}]);