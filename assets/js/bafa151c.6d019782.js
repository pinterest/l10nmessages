"use strict";(self.webpackChunkl10nmessages_website=self.webpackChunkl10nmessages_website||[]).push([[290],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>m});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=a.createContext({}),p=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},d=function(e){var n=p(e.components);return a.createElement(l.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),u=p(t),m=r,h=u["".concat(l,".").concat(m)]||u[m]||c[m]||o;return t?a.createElement(h,s(s({ref:n},d),{},{components:t})):a.createElement(h,s({ref:n},d))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,s=new Array(o);s[0]=u;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,s[1]=i;for(var p=2;p<o;p++)s[p]=t[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},1679:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>c,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var a=t(7462),r=(t(7294),t(3905));const o={title:"Resource Bundle"},s=void 0,i={unversionedId:"resource-bundle",id:"resource-bundle",title:"Resource Bundle",description:"L10nMessages uses java.util.ResourceBundle to load localized messages and specifically focuses",source:"@site/docs/resource-bundle.md",sourceDirName:".",slug:"/resource-bundle",permalink:"/docs/resource-bundle",draft:!1,editUrl:"https://github.com/pinterest/l10nmessages/edit/main/docs/docs/resource-bundle.md",tags:[],version:"current",frontMatter:{title:"Resource Bundle"},sidebar:"docs",previous:{title:"Maven",permalink:"/docs/installation/maven"},next:{title:"Annotation Processor",permalink:"/docs/annotation-processor"}},l={},p=[{value:"Naming convention",id:"naming-convention",level:2},{value:"Content and encoding",id:"content-and-encoding",level:2},{value:"Legacy language codes",id:"legacy-language-codes",level:2},{value:"Other ResourceBundle types",id:"other-resourcebundle-types",level:2}],d={toc:p};function c(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"L10nMessages")," uses ",(0,r.kt)("inlineCode",{parentName:"p"},"java.util.ResourceBundle")," to load localized messages and specifically focuses\non improving the experience when working with resource bundles that are backed by ",(0,r.kt)("inlineCode",{parentName:"p"},"properties"),"\nfiles."),(0,r.kt)("p",null,"In plain Java, there is are no safeguard to ensure ",(0,r.kt)("inlineCode",{parentName:"p"},"properties")," files are present, nor that the\nmessages are present and valid which can lead to hard failure at runtime."),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"/docs/annotation-processor"},"Annotation Processor")," can be used to validate the existence of the\n",(0,r.kt)("inlineCode",{parentName:"p"},"properties")," files at build time and to check the messages' validity. It will also generate an\n",(0,r.kt)("inlineCode",{parentName:"p"},"enum")," that can be then used to initialize the fluent API and to provide strong typing of message\nkeys insuring the existence of messages at runtime."),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"/docs/fluent-api"},"Fluent API")," can simply be initialized from the ",(0,r.kt)("inlineCode",{parentName:"p"},"enum")," and will seamlessly load\nmessages from the resource bundle. It can also be used without the annotation processor, in which\ncase the resource bundle ",(0,r.kt)("inlineCode",{parentName:"p"},"baseName")," needs to be provided manually and message key will be untyped\nstrings."),(0,r.kt)("h2",{id:"naming-convention"},"Naming convention"),(0,r.kt)("p",null,"Java uses the notion of ",(0,r.kt)("inlineCode",{parentName:"p"},"baseName")," to identify a ",(0,r.kt)("inlineCode",{parentName:"p"},"ResourceBundle"),"."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"baseName")," follows the pattern ",(0,r.kt)("inlineCode",{parentName:"p"},"{package}.{bundleName}")," where ",(0,r.kt)("inlineCode",{parentName:"p"},"package"),' is a regular Java\npackage in "dotted" notation. The ',(0,r.kt)("inlineCode",{parentName:"p"},"package")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"bundleName")," are defined by the user."),(0,r.kt)("p",null,"The root properties filename follows the pattern: ",(0,r.kt)("inlineCode",{parentName:"p"},"{bundleName}.properties")," and the localized\nproperties filename follows the pattern: ",(0,r.kt)("inlineCode",{parentName:"p"},"{bundleName}_{locale}.properties"),"."),(0,r.kt)("p",null,"For example, with the bundle name: ",(0,r.kt)("inlineCode",{parentName:"p"},"Messages")," and package: ",(0,r.kt)("inlineCode",{parentName:"p"},"com.pinterest.l10nmessages.example"),", the\nbase name will be: ",(0,r.kt)("inlineCode",{parentName:"p"},"com.pinterest.l10nmessages.example.Messages"),", the root properties file will be:\n",(0,r.kt)("inlineCode",{parentName:"p"},"Messages.properties")," and the localized properties for French will be ",(0,r.kt)("inlineCode",{parentName:"p"},"Messages_fr.properties"),"."),(0,r.kt)("p",null,"With ",(0,r.kt)("inlineCode",{parentName:"p"},"Maven")," directory layout, the files will be:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-properties",metastring:'title="src/resources/java/com/pinterest/l10nmessages/example/Messages.properties"',title:'"src/resources/java/com/pinterest/l10nmessages/example/Messages.properties"'},"welcome=Welcome!\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-properties",metastring:'title="src/resources/java/com/pinterest/l10nmessages/example/Messages_fr.properties"',title:'"src/resources/java/com/pinterest/l10nmessages/example/Messages_fr.properties"'},"welcome=Bienvenue!\n")),(0,r.kt)("h2",{id:"content-and-encoding"},"Content and encoding"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"properties")," files are simple plain text files. They contain a list of messages that are identified\nby keys. Use a comment before the key to provide translator instruction."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-properties"},"# Translator instruction for message1\nkey1=message1\n# Translator instruction for message2\nkey2=message2\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"UTF-8")," is recommended for the file content. For legacy purpose, ",(0,r.kt)("inlineCode",{parentName:"p"},"ISO-8859-1")," is also supported."),(0,r.kt)("p",null,"With Java 8, the library uses a similar logic as what became standard with Java 9. It tries to load\nthe ",(0,r.kt)("inlineCode",{parentName:"p"},"properties")," as ",(0,r.kt)("inlineCode",{parentName:"p"},"UTF-8")," and fallbacks to ",(0,r.kt)("inlineCode",{parentName:"p"},"ISO-8859-1")," in case of errors. With Java 9+, the JDK\ncode is directly used."),(0,r.kt)("h2",{id:"legacy-language-codes"},"Legacy language codes"),(0,r.kt)("p",null,"Hebrew, Indonesian and Yiddish have obsolet forms: ",(0,r.kt)("inlineCode",{parentName:"p"},"iw"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"in")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"ji")," which respectively\nmap to the new language codes: ",(0,r.kt)("inlineCode",{parentName:"p"},"he"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"id")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"yi"),"."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"L10nMessages")," will load data from either forms and that regardless of the tag used when the locale\nis created."),(0,r.kt)("p",null,"More concretely, ",(0,r.kt)("inlineCode",{parentName:"p"},"properties")," files can be named\n",(0,r.kt)("inlineCode",{parentName:"p"},"Message_iw.properties")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"Messages_he.properties"),", and the locale created with either\n",(0,r.kt)("inlineCode",{parentName:"p"},'new Locale("iw")')," or ",(0,r.kt)("inlineCode",{parentName:"p"},'new Locale("he")'),", ",(0,r.kt)("inlineCode",{parentName:"p"},"L10nMessages")," will adapt accordingly."),(0,r.kt)("p",null,"This is similar to the behavior introduced by Java 17, but addresses issues with previous versions\nof Java that will only load the data for the old forms."),(0,r.kt)("p",null,"For more context, before Java 17, Locale's constructor always converted those three language codes\nto their earlier, obsoleted forms. The ",(0,r.kt)("inlineCode",{parentName:"p"},"properties")," files had to be named using the obsolete forms,\nand that regardless of the form used when creating the locale. In Java 17, the new forms are used by\ndefault. The ",(0,r.kt)("inlineCode",{parentName:"p"},"properties")," files can use either form. If the default form is missing it will attempt\nto load the alternate form."),(0,r.kt)("h2",{id:"other-resourcebundle-types"},"Other ResourceBundle types"),(0,r.kt)("p",null,"The fluent API can use any customized ",(0,r.kt)("inlineCode",{parentName:"p"},"ResourceBundle"),". The annotation processor is only useful for\nthe ones that are backed by properties files."))}c.isMDXComponent=!0}}]);