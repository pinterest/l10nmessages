"use strict";(self.webpackChunkl10nmessages_website=self.webpackChunkl10nmessages_website||[]).push([[818],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>u});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=a.createContext({}),p=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},c=function(e){var n=p(e.components);return a.createElement(l.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=p(t),u=i,g=m["".concat(l,".").concat(u)]||m[u]||d[u]||o;return t?a.createElement(g,r(r({ref:n},c),{},{components:t})):a.createElement(g,r({ref:n},c))}));function u(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,r=new Array(o);r[0]=m;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,r[1]=s;for(var p=2;p<o;p++)r[p]=t[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},1893:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var a=t(7462),i=(t(7294),t(3905));const o={title:"Maven"},r=void 0,s={unversionedId:"installation/maven",id:"installation/maven",title:"Maven",description:"Maven has two different ways to set up annotation processors:",source:"@site/docs/installation/maven.md",sourceDirName:"installation",slug:"/installation/maven",permalink:"/docs/installation/maven",draft:!1,editUrl:"https://github.com/pinterest/l10nmessages/edit/main/docs/docs/installation/maven.md",tags:[],version:"current",frontMatter:{title:"Maven"},sidebar:"docs",previous:{title:"Gradle",permalink:"/docs/installation/gradle"},next:{title:"Resource Bundle",permalink:"/docs/resource-bundle"}},l={},p=[{value:"JDK only",id:"jdk-only",level:2},{value:"Default discovery process",id:"default-discovery-process",level:3},{value:"Explicit configuration of the annotation processor (recommanded)",id:"explicit-configuration-of-the-annotation-processor-recommanded",level:3},{value:"With ICU4J",id:"with-icu4j",level:2},{value:"Be aware of the annotation processor limitations with Maven",id:"be-aware-of-the-annotation-processor-limitations-with-maven",level:2},{value:"Maven plugin",id:"maven-plugin",level:2},{value:"Development / Watcher",id:"development--watcher",level:2}],c={toc:p};function d(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Maven")," has two different ways to set up annotation processors:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Default discovery process"),(0,i.kt)("li",{parentName:"ul"},"Explicit configuration (recommended)")),(0,i.kt)("p",null,"Regardless, the main underlying steps are:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Add the runtime dependency"),(0,i.kt)("li",{parentName:"ul"},"Configure the annotation processor")),(0,i.kt)("admonition",{type:"warning"},(0,i.kt)("p",{parentName:"admonition"},"While it is possible to use the annotation processor with Maven projects, there are some limitations\nthat can lead to ",(0,i.kt)("strong",{parentName:"p"},"false positive builds")," or making the developer experience cumbersome. Be aware\nof them and see\n",(0,i.kt)("a",{parentName:"p",href:"#be-aware-of-the-annotation-processor-limitations-with-maven"},"details and workarounds")," below."),(0,i.kt)("p",{parentName:"admonition"},"Consider using the ",(0,i.kt)("a",{parentName:"p",href:"#maven-plugin"},"Maven plugin")," as an alternative.")),(0,i.kt)("h2",{id:"jdk-only"},"JDK only"),(0,i.kt)("h3",{id:"default-discovery-process"},"Default discovery process"),(0,i.kt)("p",null,'Just add the annotation processor\'s library as "compile" dependency to use the default discovery\nprocess. The processor will automatically be detected and the ',(0,i.kt)("inlineCode",{parentName:"p"},"properties")," files will be made\naccessible to the processor via the classpath. The runtime library is made available as a transitive\ndependency."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml",metastring:"title=pom.xml",title:"pom.xml"},"<dependencies>\n  <dependency>\n    <groupId>com.pinterest.l10nmessages</groupId>\n    <artifactId>l10nmessages-proc</artifactId>\n    <version>1.0.0</version>\n  </dependency>\n</dependencies>\n")),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"The drawback of this approach is that the annotation processor is declared as ",(0,i.kt)("inlineCode",{parentName:"p"},"compile")," dependency\nwhich is not optimal (vs. only having the runtime library).")),(0,i.kt)("h3",{id:"explicit-configuration-of-the-annotation-processor-recommanded"},"Explicit configuration of the annotation processor (recommanded)"),(0,i.kt)("p",null,'Add a "compile" dependency on the runtime library and configure the annotation process in the\n',(0,i.kt)("inlineCode",{parentName:"p"},"maven-compiler-plugin"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml",metastring:"title=pom.xml",title:"pom.xml"},"<project>\n  <dependencies>\n    <dependency>\n      <groupId>com.pinterest.l10nmessages</groupId>\n      <artifactId>l10nmessages</artifactId>\n      <version>1.0.0</version>\n    </dependency>\n  </dependencies>\n  <build>\n    <plugins>\n      <plugin>\n        <artifactId>maven-compiler-plugin</artifactId>\n        <configuration>\n          <annotationProcessorPaths>\n            <dependency>\n              <groupId>com.pinterest.l10nmessages</groupId>\n              <artifactId>l10nmessages-proc</artifactId>\n              <version>1.0.0</version>\n            </dependency>\n          </annotationProcessorPaths>\n          <annotationProcessors>com.pinterest.l10nmessages.L10nPropertiesProcessor\n          </annotationProcessors>\n        </configuration>\n        <groupId>org.apache.maven.plugins</groupId>\n        <version>${maven.compiler.version}</version>\n      </plugin>\n    </plugins>\n  </build>\n</project>\n")),(0,i.kt)("h2",{id:"with-icu4j"},"With ICU4J"),(0,i.kt)("p",null,'Same as "JDK only" and add the ',(0,i.kt)("inlineCode",{parentName:"p"},"icu4j"),' as "compile" dependency.'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml",metastring:"title=pom.xml",title:"pom.xml"},"<project>\n  <dependencies>\n    <dependency>\n      <groupId>com.pinterest.l10nmessages</groupId>\n      <artifactId>l10nmessages</artifactId>\n      <version>1.0.0</version>\n    </dependency>\n    <dependency>\n      <groupId>com.ibm.icu</groupId>\n      <artifactId>icu4j</artifactId>\n      <version>71.1</version>\n    </dependency>\n  </dependencies>\n  <build>\n    <plugins>\n      <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-compiler-plugin</artifactId>\n        <configuration>\n          <annotationProcessorPaths>\n            <dependency>\n              <groupId>com.pinterest.l10nmessages</groupId>\n              <artifactId>l10nmessages-proc</artifactId>\n              <version>1.0.0</version>\n            </dependency>\n          </annotationProcessorPaths>\n          <annotationProcessors>com.pinterest.l10nmessages.L10nPropertiesProcessor\n          </annotationProcessors>\n        </configuration>\n      </plugin>\n    </plugins>\n  </build>\n</project>\n")),(0,i.kt)("h2",{id:"be-aware-of-the-annotation-processor-limitations-with-maven"},"Be aware of the annotation processor limitations with Maven"),(0,i.kt)("p",null,'With Maven (and contrarily to Gradle), it is not possible to register resources as "compile"\ndependencies.'),(0,i.kt)("p",null,"Because of that, when a registered ",(0,i.kt)("inlineCode",{parentName:"p"},"properties")," file changes, it is not automatically re-processed\nby the annotation processor during the next compilation. To be re-processed, the class that\nregisters the ",(0,i.kt)("inlineCode",{parentName:"p"},"properties")," file using the ",(0,i.kt)("inlineCode",{parentName:"p"},"@L10nProperties")," must be re-compiled. And for that class\nto be re-compiled, it has to be either changed or a full clean compilation performed."),(0,i.kt)("admonition",{type:"warning"},(0,i.kt)("p",{parentName:"admonition"},"To avoid staled ",(0,i.kt)("inlineCode",{parentName:"p"},"enum")," and invalid messages, force a full clean compilation with:\n",(0,i.kt)("inlineCode",{parentName:"p"},"mvn clean compile")),(0,i.kt)("p",{parentName:"admonition"},"Consider using the ",(0,i.kt)("a",{parentName:"p",href:"#maven-plugin"},"Maven plugin")," too.")),(0,i.kt)("p",null,"The following example shows the issue. It starts with an initial successful compilation. Then, the\n",(0,i.kt)("inlineCode",{parentName:"p"},"properties")," file (and only that file) is changed. The following compilation still succeeds even\nthough we'd expect it to fail as the ",(0,i.kt)("inlineCode",{parentName:"p"},"welcome_user")," message is broken. We'd also expect the ",(0,i.kt)("inlineCode",{parentName:"p"},"enum"),"\nto be re-generated and re-compiled to reflect the ",(0,i.kt)("inlineCode",{parentName:"p"},"bye_up")," key change but instead it is staled."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"$ cat src/main/resources/com/pinterest/l10nmessages/example/Messages.properties\nwelcome_user=Welcome {username}!\nbye=Bye\n\n$ mvn clean compile\n...\n[INFO] BUILD SUCCESS\n\n# only change the properties file\n$ cat src/main/resources/com/pinterest/l10nmessages/example/Messages.properties\nwelcome_user=Welcome {usernam!\nbye_up=Bye\n\n$ nvm compile\n...\n[INFO] Nothing to compile - all classes are up to date\n[INFO] BUILD SUCCESS\n\n$ mvn clean compile\n...\n[ERROR] BUILD FAILURE\n")),(0,i.kt)("h2",{id:"maven-plugin"},"Maven plugin"),(0,i.kt)("p",null,"The Maven plugin: ",(0,i.kt)("inlineCode",{parentName:"p"},"l10nmessages-mvn-plugin")," addresses the\n",(0,i.kt)("a",{parentName:"p",href:"#be-aware-of-the-annotation-processor-limitations-with-maven"},"limitations of the annotation processor"),"\nand can be used as a replacement."),(0,i.kt)("p",null,"To register ",(0,i.kt)("inlineCode",{parentName:"p"},"properties")," files for processing, use ",(0,i.kt)("inlineCode",{parentName:"p"},"l10nPropertiesList")," element of the plugin\nconfiguration. The same options as with ",(0,i.kt)("inlineCode",{parentName:"p"},"@L10nProperties")," can be provided."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},"\n<configuration>\n  <l10nPropertiesList>\n    <l10nProperties>\n      <baseName>com.pinterest.l10nmessages.Messages</baseName>\n    </l10nProperties>\n    <l10nProperties>\n      <baseName>com.pinterest.l10nmessages.OtherMessages</baseName>\n      <messageFormatValidationTargets>ROOT</messageFormatValidationTargets>\n    </l10nProperties>\n  </l10nPropertiesList>\n</configuration>\n")),(0,i.kt)("p",null,"Runtime dependencies are like with the annotation processor. Only the plugin\n",(0,i.kt)("inlineCode",{parentName:"p"},"l10nmessages-mvn-plugin")," replaces the annotation processor's configuration. If using ",(0,i.kt)("inlineCode",{parentName:"p"},"icu4j")," it\nneeds to be provided as ",(0,i.kt)("inlineCode",{parentName:"p"},"compile")," dependency and as ",(0,i.kt)("inlineCode",{parentName:"p"},"plugin")," dependency"),(0,i.kt)("p",null,"The full configuration looks like:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml",metastring:"title=pom.xml",title:"pom.xml"},"<project>\n  <dependencies>\n    <dependency>\n      <groupId>com.pinterest.l10nmessages</groupId>\n      <artifactId>l10nmessages</artifactId>\n      <version>1.0.0</version>\n    </dependency>\n    <dependency>\n      <groupId>com.ibm.icu</groupId>\n      <artifactId>icu4j</artifactId>\n      <version>71.1</version>\n    </dependency>\n  </dependencies>\n  <build>\n    <plugins>\n      <plugin>\n        <groupId>com.pinterest.l10nmessages</groupId>\n        <artifactId>l10nmessages-mvn-plugin</artifactId>\n        <version>1.0.0</version>\n        <executions>\n          <execution>\n            <goals>\n              <goal>generate</goal>\n            </goals>\n          </execution>\n        </executions>\n        <configuration>\n          <l10nPropertiesList>\n            <l10nProperties>\n              <baseName>com.pinterest.l10nmessages.example.Messages</baseName>\n            </l10nProperties>\n          </l10nPropertiesList>\n        </configuration>\n        <dependencies>\n          <dependency>\n            <groupId>com.ibm.icu</groupId>\n            <artifactId>icu4j</artifactId>\n            <version>71.1</version>\n          </dependency>\n        </dependencies>\n      </plugin>\n    </plugins>\n  </build>\n</project>\n")),(0,i.kt)("p",null,"With the plugin now setup, the ",(0,i.kt)("inlineCode",{parentName:"p"},"enum"),"s generation and the message validation is done by default\nduring the ",(0,i.kt)("inlineCode",{parentName:"p"},"generate-sources")," phase. Any change to the ",(0,i.kt)("inlineCode",{parentName:"p"},"properties")," files will be processed."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"$ mvn generate-sources\n")),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"It is possible to use both the annotation processor and the Maven plugin at the same time. But when\ndoing so, make sure that the ",(0,i.kt)("inlineCode",{parentName:"p"},"properties")," files are only registered once else it will generate\nduplicated ",(0,i.kt)("inlineCode",{parentName:"p"},"enum"),"s that will break the compilation.")),(0,i.kt)("h2",{id:"development--watcher"},"Development / Watcher"),(0,i.kt)("p",null,"During development, it can become cumbersome to manually call ",(0,i.kt)("inlineCode",{parentName:"p"},"mvn generate-resources")," (or\n",(0,i.kt)("inlineCode",{parentName:"p"},"mvn clean compile")," with the anntation processor) every time a new string is added to the\n",(0,i.kt)("inlineCode",{parentName:"p"},"properties")," file."),(0,i.kt)("p",null,"Use a watcher to automate the re-generation. For example on Mac OSX:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},'brew install fswatch\nfswatch -e ".*" -i "\\\\.properties$" src/ | xargs -n1 -I{} mvn generate-sources\n')),(0,i.kt)("p",null,"It will also perfectly integrate with IDEs. Choose between executing ",(0,i.kt)("inlineCode",{parentName:"p"},"mvn generate-sources")," or\n",(0,i.kt)("inlineCode",{parentName:"p"},"mvn compile")," depending if you want to just generate the ",(0,i.kt)("inlineCode",{parentName:"p"},"enum")," file or if you also want to compile\nit. It is sometimes preferable to delegate the compilation to the IDE instead)."))}d.isMDXComponent=!0}}]);